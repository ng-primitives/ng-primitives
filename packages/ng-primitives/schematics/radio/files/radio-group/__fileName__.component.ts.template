import { Component, forwardRef, model } from '@angular/core';
import { NG_VALUE_ACCESSOR,ControlValueAccessor } from '@angular/forms';
import {  NgpRadioGroup, NgpRadioGroupToken } from 'ng-primitives/radio';
import { onFormControlChange } from 'ng-primitives/utils';

@Component({
  standalone: true,
  selector: '<%= selector %>',
  hostDirectives: [
    {
      directive: NgpRadioGroup,
      inputs: ['ngpRadioGroupValue:value'],
      outputs: ['ngpRadioGroupValueChange:valueChange'],
    },
  ],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => <%= className %>Component),
      multi: true,
    },
    {
      provide: NgpRadioGroupToken,
      useExisting: NgpRadioGroup,
    },
  ],
  <%_ if (inlineTemplate) { -%>
  template: `<%- template %>`,
  <%_ } else { -%>
  templateUrl: './<%= fileName %>.component.html',
  <%_ } -%>
  <%_ if (inlineStyle) { -%>
  styles: `<%- styles %>`,
  <%_ } else { -%>
  styleUrl: './<%= fileName %>.component.<%= style %>',
  <%_ } -%>
})
export class <%= className %>Component implements ControlValueAccessor {
  /**
   * The checked state of the checkbox.
   */
  readonly value = model<string | null>(null);

  /**
   * The onChange callback.
   */
  private onChange?: (value: string) => void;

  /**
   * The onTouched callback.
   */
  protected onTouched?: () => void;
  constructor() {
    onFormControlChange(this.value, this.onChange);
  }

  writeValue(value: string): void {
    this.value.set(value);
  }

  registerOnChange(fn: (value: string) => void): void {
    this.onChange = fn;
  }

  registerOnTouched(fn: () => void): void {
    this.onTouched = fn;
  }
}
