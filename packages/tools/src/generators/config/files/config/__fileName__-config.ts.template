import { InjectionToken, Provider, inject } from '@angular/core';

export interface Ngp<%= className %>Config {
}

export const default<%= className %>Config: Ngp<%= className %>Config = {
};

export const Ngp<%= className %>ConfigToken = new InjectionToken<Ngp<%= className %>Config>('Ngp<%= className %>ConfigToken');

/**
 * Provide the default <%= className %> configuration
 * @param config The <%= className %> configuration
 * @returns The provider
 */
export function provide<%= className %>Config(config: Partial<Ngp<%= className %>Config>): Provider[] {
  return [
    {
      provide: Ngp<%= className %>ConfigToken,
      useValue: { ...default<%= className %>Config, ...config },
    },
  ];
}

/**
 * Inject the <%= className %> configuration
 * @returns The global <%= className %> configuration
 */
export function inject<%= className %>Config(): Ngp<%= className %>Config {
  return inject(Ngp<%= className %>ConfigToken, { optional: true }) ?? default<%= className %>Config;
}
