---
name: '<%= title %>'
---

# <%= title %>

<%= description %>

<docs-example name="<%= fileName %>"></docs-example>

## Import

Import the <%= className %> primitives from `ng-primitives/<%= primitive %>`.

```ts
import { Ngp<%= className %> } from 'ng-primitives/<%= primitive %>';
```


## Usage

Assemble the <%= fileName %> directives in your template.

```html
<div ngp<%= className %>>
</div>
```

<% if(reusableComponent) { %>
## Reusable Component

Create a reusable component that uses the `Ngp<%= className %>` directive.

<docs-snippet name="<%= fileName %>"></docs-snippet>

## Schematics

Generate a reusable <%= fileName %> component using the Angular CLI.

```bash npm
ng g ng-primitives:primitive <%= fileName %>
```

### Options

- `path`: The path at which to create the component file.
- `prefix`: The prefix to apply to the generated component selector.
- `componentSuffix`: The suffix to apply to the generated component class name.
- `fileSuffix`: The suffix to apply to the generated component file name. Defaults to `component`.
- `exampleStyles`: Whether to include example styles in the generated component file. Defaults to `true`.
<% } %>

## API Reference

The following directives are available to import from the `ng-primitives/<%= primitive %>` package:

### Ngp<%= className %>

- Selector: `[ngp<%= className %>]`
- Exported As: `ngp<%= className %>`

<% if(globalConfig) { %>
## Global Configuration

You can configure the default options for all <%= fileName %>s in your application by using the `provide<%= className %>Config` function in a providers array.

```ts
import { provide<%= className %>Config } from 'ng-primitives/<%= primitive %>';

bootstrapApplication(AppComponent, {
  providers: [
    provide<%= className %>Config({
    }),
  ],
});
```

### Ngp<%= className %>Config
<% } %>
